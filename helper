#!/usr/bin/env python3
from collections import defaultdict
from pprint      import pprint

import datetime, pickle, sys, os
from os.path import expanduser

from lib.schedule import get_schedule
from lib.task     import Task

__home__ = expanduser("~")
filename = __home__ + '/.tasks.pkl'


#******************************************************************************
#  Auxillary
#******************************************************************************



def td_format(td_object):
   seconds = int(td_object.total_seconds())
   periods = [
           ('year',        60*60*24*365),
           ('month',       60*60*24*30),
           ('day',         60*60*24),
           ('hour',        60*60),
           ('minute',      60),
           ('second',      1)
           ]

   strings=[]
   for period_name,period_seconds in periods:
       if seconds > period_seconds:
           period_value , seconds = divmod(seconds,period_seconds)
           if period_value == 1:
               strings.append("%s %s" % (period_value, period_name))
           else:
               strings.append("%s %ss" % (period_value, period_name))
   return ", ".join(strings)


def get_tasks(filename):
    try:
        with open(filename, 'rb') as infile:
            tasks = pickle.load(infile)
    except FileNotFoundError as e:
        tasks = defaultdict(list)
    return tasks

def save_tasks(tasks, filename):
    with open(filename, 'wb') as outfile:
        pickle.dump(tasks, outfile)

def get_possible(tasks, duration):
    keys = [key for key in tasks.keys() if key <= duration]
    if len(keys) == 0:
        return []
    return tasks[keys[0]]


 #******************************************************************************
 #  Subcommands
 #******************************************************************************

def add(tasks, schedule, name, duration, precedence=5, finish=None, prereqs=''):
    duration = int(duration)
    tasks[duration].append(Task(name, duration, precedence, finish, prereqs))

def do(tasks, schedule, duration, overwrite=True):
    duration = int(duration)
    possible = tasks[duration]
    if len(possible) == 0:
        print('No available tasks to be done')
    else:
        print('todo task:')
        print(possible[0])
        if overwrite:
            tasks[duration] = possible[1:]

def see(tasks, schedule, duration):
    duration = int(duration)
    print('todo task would be:')
    do(tasks, schedule, duration, overwrite=False)


def todo(tasks, schedule):
    for duration, item in schedule:
        if item == 'gap':
            return get_possible(tasks, duration)
    return None

def view(tasks, schedule):
    pprint(tasks)

def clear(tasks, schedule):
    if input('Are you sure? ').lower() in ['y', 'yes']:
        tasks.clear()
        print('Tasks cleared')
    else:
        print('Task clear aborted')

def done(tasks, schedule):
    last = todo(tasks, schedule)
    if last is None or len(last) == 0:
        return
    last = last[0]
    print(last)
    for k, v in tasks.items():
        if last in v:
            v.remove(last)
            break

#******************************************************************************
#  Subcommand tree
#******************************************************************************

commands = {
        'done'  : done,
        'todo'  : todo,
        'clear' : clear,
        'view'  : view,
        'add'   : add,
        'see'   : see,
        'do'    : do
        }

def main(args):
    try:
        if len(args) == 0:
            print('Please provide arguments to helper script')
            return 0

        #print(filename)
        def color(c):
            return lambda s2 : '%{F' + c + '}' + s2 + '%{F-}'
        purple = color('#df42f4')
        yellow = color('#f4ff82')
        green  = color('#b3f442')
        red    = color('#f00')

        timef = lambda t : yellow(str(round(time)))

        tasks = get_tasks(filename)

        schedule, remaining = get_schedule()
        now = datetime.datetime.today()
        left = datetime.datetime(2087, 2, 18) - now
        reprstr = purple(td_format(left)) + ': TASK '
        strs = []
        for i in range(2):
            time, name = schedule[i]
            nextTasks = todo(tasks, schedule)
            if name == 'gap':
                if nextTasks is None or len(nextTasks) == 0:
                    strs.append(green('Free') + ' {}m'.format(timef(time)))
                else:
                    task = nextTasks[0]
                    strs.append(green(task.name) + '{}m/{}m'.format(timef(task.duration), timef(time)))
            else:
                strs.append(green(name) + ' {}m'.format(timef(time)))
                if remaining > datetime.timedelta(minutes=0):
                    strs.append(green('{} left'.format(remaining)))
                    if remaining < datetime.timedelta(minutes=5):
                        strs.append(red('*URGENT*'))
        reprstr += ', '.join(strs)
        print(reprstr)

        pprint(schedule)

        subCommand, *text = args
        print(tasks)
        commands[subCommand](tasks, schedule, *text)
        print(tasks)

        save_tasks(tasks, filename)
    except Exception as e:
        print(e)
        print('Scheduler Error')
        raise
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
