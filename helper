#!/usr/bin/env python3
from collections import defaultdict
from pprint      import pprint

import pickle, sys, os
from os.path import expanduser

from lib.schedule import get_schedule
from lib.task     import Task

__home__ = expanduser("~")
filename = __home__ + '/tasks.pkl'


#******************************************************************************
#  Auxillary
#******************************************************************************

def get_tasks(filename):
    try:
        with open(filename, 'rb') as infile:
            tasks = pickle.load(infile)
    except FileNotFoundError as e:
        tasks = defaultdict(list)
    return tasks

def save_tasks(tasks, filename):
    with open(filename, 'wb') as outfile:
        pickle.dump(tasks, outfile)

def get_possible(tasks, duration):
    keys = [key for key in tasks.keys() if key <= duration]
    if len(keys) == 0:
        return None
    return tasks[keys[0]]


 #******************************************************************************
 #  Subcommands
 #******************************************************************************

def add(tasks, schedule, name, duration, precedence=5, finish=None, prereqs=''):
    duration = int(duration)
    tasks[duration].append(Task(name, duration, precedence, finish, prereqs))

def do(tasks, schedule, duration, overwrite=True):
    duration = int(duration)
    possible = tasks[duration]
    if len(possible) == 0:
        print('No available tasks to be done')
    else:
        print('todo task:')
        print(possible[0])
        if overwrite:
            tasks[duration] = possible[1:]

def see(tasks, schedule, duration):
    duration = int(duration)
    print('todo task would be:')
    do(tasks, schedule, duration, overwrite=False)


def todo(tasks, schedule):
    for duration, item in schedule:
        if item == 'gap':
            #print('In the upcoming {}min gap, the following could occur:'.format(duration))
            #see(tasks, schedule, duration)
            return get_possible(tasks, duration)
    return 'test'

def view(tasks, schedule):
    pprint(tasks)

def clear(tasks, schedule):
    if input('Are you sure?').lower() in ['y', 'yes']:
        if os.path.exists(filename):
            os.remove(filename)
        print('Tasks cleared')
    else:
        print('Task clear aborted')

#******************************************************************************
#  Subcommand tree
#******************************************************************************

commands = {
        'todo'  : todo,
        'clear' : clear,
        'view'  : view,
        'add'   : add,
        'see'   : see,
        'do'    : do
        }

def main(args):
    if len(args) == 0:
        print('Please provide arguments to helper script')
        return 0

    tasks = get_tasks(filename)

    schedule = get_schedule()
    time, name = schedule[0]
    print('{} in {} for {} minutes'.format(todo(tasks, schedule), name, round(time, 2)))

    subCommand, *text = args
    commands[subCommand](tasks, schedule, *text)

    save_tasks(tasks, filename)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
