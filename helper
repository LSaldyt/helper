#!/usr/bin/env python3
from collections import defaultdict
from pprint      import pprint

import datetime, httplib2, pickle, sys, os
from os.path import expanduser

from lib.schedule import get_schedule
from lib.task     import Task
from lib.upload   import upload

__home__ = expanduser("~")
filename = __home__ + '/.tasks.pkl'

#******************************************************************************
# Colors
#******************************************************************************

def color(c):
    return lambda s2 : '%{F' + c + '}' + str(s2) + '%{F-}'
white  = lambda s : s
purple = color('#e091ff')
yellow = color('#ffce96')
orange = color('#f4a742')
green  = color('#72ffc1')
pink   = color('#ff96b7')
red    = color('#f00')

purple_shades = list(map(color, 
                ['#d400ff',
                 '#d411fc',
                 '#dd3aff',
                 '#df55fc',
                 '#e670ff',
                 '#eb8eff',
                 '#f2b7ff']))


#******************************************************************************
#  Auxillary
#******************************************************************************


def td_format(td_object, brief=True):
   seconds = int(td_object.total_seconds())
   periods = [
           ('year',   60*60*24*365),
           ('month',  60*60*24*30),
           ('day',    60*60*24),
           ('hour',   60*60),
           ('minute', 60),
           ('second', 1)
           ]

   strings=[]
   for (period_name, period_seconds), tColor in zip(periods, (purple_shades)):
       if seconds > period_seconds:
           period_value , seconds = divmod(seconds,period_seconds)
           if brief:
               period_name = period_name[0]
           elif period_value != 1:
               period_name = str(period_name) + 's'
           strings.append("%s%s" % (tColor(period_value), yellow(period_name)))
   return ", ".join(strings)

mformat = lambda s : td_format(datetime.timedelta(minutes=s))

def load(filename):
    try:
        with open(filename, 'rb') as infile:
            data = pickle.load(infile)
    except FileNotFoundError as e:
        data = dict(tasks=defaultdict(list),
                    timer=None)
    return data

def save(data, filename):
    with open(filename, 'wb') as outfile:
        pickle.dump(data, outfile)

def get_possible(tasks, duration):
    keys = [key for key in tasks.keys() if key <= duration]
    if len(keys) == 0:
        return []
    return tasks[keys[0]]


 #******************************************************************************
 #  SubtaskCommands
 #******************************************************************************

def add(tasks, schedule, name, duration, precedence=5, finish=None, prereqs=''):
    duration = int(duration)
    tasks[duration].append(Task(name, duration, precedence, finish, prereqs))

def do(tasks, schedule, duration, overwrite=True):
    duration = int(duration)
    possible = tasks[duration]
    if len(possible) == 0:
        print('No available tasks to be done')
    else:
        print('todo task:')
        print(possible[0])
        if overwrite:
            tasks[duration] = possible[1:]

def see(tasks, schedule, duration):
    duration = int(duration)
    print('todo task would be:')
    do(tasks, schedule, duration, overwrite=False)


def todo(tasks, schedule):
    for duration, item in schedule:
        if item == 'gap':
            return get_possible(tasks, duration)
    return None

def view(tasks, schedule):
    pprint(tasks)

def clear(tasks, schedule):
    if input('Are you sure? ').lower() in ['y', 'yes']:
        tasks.clear()
        print('Tasks cleared')
    else:
        print('Task clear aborted')

def done(tasks, schedule):
    last = todo(tasks, schedule)
    if last is None or len(last) == 0:
        return
    last = last[0]
    print(last)
    for k, v in tasks.items():
        if last in v:
            v.remove(last)
            break

#******************************************************************************
# Full data-tree commands
#******************************************************************************

def timer(data, schedule, amount):
    #print('Called timer')
    amount = float(amount)
    data['timer'] = (datetime.datetime.now(), datetime.timedelta(minutes=amount))

#******************************************************************************
#  Subcommand tree
#******************************************************************************

taskCommands = {
        'done'  : done,
        'todo'  : todo,
        'clear' : clear,
        'view'  : view,
        'add'   : add,
        'see'   : see,
        'do'    : do
        }

dataCommands = {
        'timer' : timer
        }

def main(args):
    try:
        #if len(args) == 0:
        #    #print('Please provide arguments to helper script')
        #    #return 0

        timef = lambda t : yellow(str(round(time)))

        data = load(filename)
        tasks = data['tasks']

        strs = []
        now = datetime.datetime.today()
        left = datetime.datetime(2087, 2, 18) - now
        reprstr = ('TIME ' + td_format(left))
        try:
            schedule, remaining = get_schedule()
            for i in range(2):
                time, name = schedule[i]
                nextTasks = todo(tasks, schedule)
                if name == 'gap':
                    if nextTasks is None or len(nextTasks) == 0:
                        strs.append(green('Free ') + mformat(time))
                    else:
                        task = nextTasks[0]
                        strs.append(green(task.name) + '{}m/{}m'.format(timef(task.duration), timef(time)))
                else:
                    strs.append(green(name) + ' ' + mformat(time))
                    if remaining > datetime.timedelta(minutes=0):
                        strs.append(green('{} left'.format(remaining)))
                        if remaining < datetime.timedelta(minutes=5):
                            strs.append(red('*< 5 minutes*'))
            reprstr += (' TASK ' + ', '.join(strs))
        except httplib2.ServerNotFoundError:
            reprstr += ' No connection'
            schedule = []


        if data['timer'] is not None:
            start, duration = data['timer']
            delta = duration - (datetime.datetime.now() - start)
            if delta < duration:
                timerColor = yellow
                if delta < datetime.timedelta(minutes=5):
                    timerColor = yellow
                if delta < datetime.timedelta(minutes=1):
                    timerColor = orange
                if delta < datetime.timedelta(seconds=10):
                    timerColor = red
                reprstr += (timerColor(' TIMER ') + td_format(delta))
                if delta < datetime.timedelta(0):
                    data['timer'] = None 

        print(reprstr)

        #pprint(schedule)

        subCommand, *text = args
        try:
            taskCommands[subCommand](tasks, schedule, *text)
        except KeyError:
            dataCommands[subCommand](data, schedule, *text)


        data['tasks'] = tasks

        #print(data)

        save(data, filename)
    except Exception as e:
        print('Scheduler Error: ')
        print(e)
        raise
    return 0

if __name__ == '__main__':

    try:
        #upload('test.jpg')
        #1/0
        sys.exit(main(sys.argv[1:]))
    except Exception as e:
        print('Scheduler Error')
        print(e)
        sys.exit(0) # Disable flashing in i3 interface
